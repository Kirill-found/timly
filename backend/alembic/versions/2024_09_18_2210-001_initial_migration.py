"""Initial migration

Revision ID: 001
Revises:
Create Date: 2024-09-18 22:10:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create users table
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=sa.text('uuid_generate_v4()')),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('user', 'admin', name='userrole'), nullable=False, default='user'),
    sa.Column('company_name', sa.String(length=255), nullable=True),
    sa.Column('encrypted_hh_token', sa.Text(), nullable=True),
    sa.Column('token_verified', sa.Boolean(), nullable=False, default=False),
    sa.Column('token_verified_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False, default=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_token_verified'), 'users', ['token_verified'], unique=False)

    # Create vacancies table
    op.create_table('vacancies',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=sa.text('uuid_generate_v4()')),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('hh_vacancy_id', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('key_skills', postgresql.JSONB(astext_type=sa.Text()), nullable=False, default=sa.text('\'[]\'::jsonb')),
    sa.Column('salary_from', sa.Integer(), nullable=True),
    sa.Column('salary_to', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True, default='RUB'),
    sa.Column('experience', sa.String(length=50), nullable=True),
    sa.Column('employment', sa.String(length=50), nullable=True),
    sa.Column('schedule', sa.String(length=50), nullable=True),
    sa.Column('area', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False, default=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('applications_count', sa.Integer(), nullable=False, default=0),
    sa.Column('new_applications_count', sa.Integer(), nullable=False, default=0),
    sa.Column('last_synced_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vacancies_user_id'), 'vacancies', ['user_id'], unique=False)
    op.create_index(op.f('ix_vacancies_hh_vacancy_id'), 'vacancies', ['hh_vacancy_id'], unique=False)
    op.create_index(op.f('ix_vacancies_is_active'), 'vacancies', ['is_active'], unique=False)

    # Create applications table
    op.create_table('applications',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=sa.text('uuid_generate_v4()')),
    sa.Column('vacancy_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('hh_application_id', sa.String(length=50), nullable=False),
    sa.Column('hh_resume_id', sa.String(length=50), nullable=True),
    sa.Column('hh_negotiation_id', sa.String(length=50), nullable=True),
    sa.Column('candidate_name', sa.String(length=255), nullable=True),
    sa.Column('candidate_email', sa.String(length=255), nullable=True),
    sa.Column('candidate_phone', sa.String(length=50), nullable=True),
    sa.Column('resume_url', sa.String(length=500), nullable=True),
    sa.Column('resume_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('resume_hash', sa.String(length=64), nullable=True),
    sa.Column('is_duplicate', sa.Boolean(), nullable=False, default=False),
    sa.Column('analyzed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['vacancy_id'], ['vacancies.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_applications_vacancy_id'), 'applications', ['vacancy_id'], unique=False)
    op.create_index(op.f('ix_applications_hh_application_id'), 'applications', ['hh_application_id'], unique=True)
    op.create_index(op.f('ix_applications_hh_resume_id'), 'applications', ['hh_resume_id'], unique=False)
    op.create_index(op.f('ix_applications_candidate_name'), 'applications', ['candidate_name'], unique=False)
    op.create_index(op.f('ix_applications_resume_hash'), 'applications', ['resume_hash'], unique=False)
    op.create_index(op.f('ix_applications_is_duplicate'), 'applications', ['is_duplicate'], unique=False)

    # Create analysis_results table
    op.create_table('analysis_results',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=sa.text('uuid_generate_v4()')),
    sa.Column('application_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('skills_match', sa.Integer(), nullable=True),
    sa.Column('experience_match', sa.Integer(), nullable=True),
    sa.Column('salary_match', sa.String(length=20), nullable=True),
    sa.Column('strengths', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('weaknesses', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('red_flags', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('recommendation', sa.String(length=20), nullable=True),
    sa.Column('reasoning', sa.Text(), nullable=True),
    sa.Column('ai_model', sa.String(length=50), nullable=True),
    sa.Column('ai_tokens_used', sa.Integer(), nullable=True),
    sa.Column('ai_cost_cents', sa.Integer(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('score >= 0 AND score <= 100'),
    sa.CheckConstraint('skills_match >= 0 AND skills_match <= 100'),
    sa.CheckConstraint('experience_match >= 0 AND experience_match <= 100'),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_analysis_results_application_id'), 'analysis_results', ['application_id'], unique=True)
    op.create_index(op.f('ix_analysis_results_score'), 'analysis_results', ['score'], unique=False)
    op.create_index(op.f('ix_analysis_results_recommendation'), 'analysis_results', ['recommendation'], unique=False)

    # Create sync_jobs table
    op.create_table('sync_jobs',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False, default=sa.text('uuid_generate_v4()')),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False, default='pending'),
    sa.Column('vacancies_synced', sa.Integer(), nullable=False, default=0),
    sa.Column('applications_synced', sa.Integer(), nullable=False, default=0),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), nullable=False, default=sa.text('\'[]\'::jsonb')),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sync_jobs_user_id'), 'sync_jobs', ['user_id'], unique=False)
    op.create_index(op.f('ix_sync_jobs_status'), 'sync_jobs', ['status'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sync_jobs')
    op.drop_table('analysis_results')
    op.drop_table('applications')
    op.drop_table('vacancies')
    op.drop_table('users')
    op.execute('DROP TYPE IF EXISTS userrole')
    # ### end Alembic commands ###