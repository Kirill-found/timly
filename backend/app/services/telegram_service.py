"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö
"""
import logging
from typing import Optional
from telegram import Bot
from telegram.error import TelegramError
import asyncio

from app.config import settings
from app.utils.logger import get_logger

logger = get_logger(__name__)


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self):
        self.bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        self.admin_chat_id = getattr(settings, 'TELEGRAM_ADMIN_CHAT_ID', '')

        if self.bot_token and self.admin_chat_id:
            self.bot = Bot(token=self.bot_token)
            self.enabled = True
            logger.info("Telegram service initialized successfully")
        else:
            self.bot = None
            self.enabled = False
            logger.warning("Telegram service disabled - credentials not found")

    async def send_message(self, message: str, chat_id: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id: ID —á–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–¥–º–∏–Ω—Å–∫–∏–π)

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        if not self.enabled:
            logger.debug("Telegram disabled, skipping message")
            return False

        try:
            target_chat_id = chat_id or self.admin_chat_id
            await self.bot.send_message(
                chat_id=target_chat_id,
                text=message,
                parse_mode='HTML'
            )
            logger.info(f"Telegram message sent to {target_chat_id}")
            return True

        except TelegramError as e:
            logger.error(f"Failed to send Telegram message: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Telegram message: {e}")
            return False

    async def notify_new_user(self, user_email: str, user_name: Optional[str] = None):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        Args:
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        name = user_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        message = (
            f"üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üìß Email: {user_email}\n"
            f"üïê –í—Ä–µ–º—è: {self._get_moscow_time()}"
        )
        await self.send_message(message)

    async def notify_new_payment(
        self,
        user_email: str,
        amount: float,
        plan_type: str,
        duration_months: int
    ):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ

        Args:
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            plan_type: –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞
            duration_months: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        """
        message = (
            f"üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_email}\n"
            f"üíµ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {plan_type}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {duration_months} –º–µ—Å.\n"
            f"üïê –í—Ä–µ–º—è: {self._get_moscow_time()}"
        )
        await self.send_message(message)

    async def notify_subscription_expired(self, user_email: str, plan_type: str):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏

        Args:
            user_email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            plan_type: –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞
        """
        message = (
            f"‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_email}\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {plan_type}\n"
            f"üïê –í—Ä–µ–º—è: {self._get_moscow_time()}"
        )
        await self.send_message(message)

    async def notify_error(self, error_message: str, context: Optional[str] = None):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Args:
            error_message: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        message = f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"

        if context:
            message += f"üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n"

        message += (
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_message}\n"
            f"üïê –í—Ä–µ–º—è: {self._get_moscow_time()}"
        )
        await self.send_message(message)

    def _get_moscow_time(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        from datetime import datetime, timezone, timedelta
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        return now.strftime("%d.%m.%Y %H:%M:%S (–ú–°–ö)")


# Singleton instance
_telegram_service = None


def get_telegram_service() -> TelegramService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramService (singleton)"""
    global _telegram_service
    if _telegram_service is None:
        _telegram_service = TelegramService()
    return _telegram_service


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def notify_new_user(user_email: str, user_name: Optional[str] = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    service = get_telegram_service()
    await service.notify_new_user(user_email, user_name)


async def notify_new_payment(user_email: str, amount: float, plan_type: str, duration_months: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
    service = get_telegram_service()
    await service.notify_new_payment(user_email, amount, plan_type, duration_months)


async def notify_subscription_expired(user_email: str, plan_type: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    service = get_telegram_service()
    await service.notify_subscription_expired(user_email, plan_type)


async def notify_error(error_message: str, context: Optional[str] = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    service = get_telegram_service()
    await service.notify_error(error_message, context)
