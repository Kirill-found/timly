{
	"info": {
		"_postman_id": "timly-auth-tests-2024",
		"name": "Timly Auth API Tests",
		"description": "E2E тестирование API авторизации Timly\n\nСценарии:\n1. Регистрация нового пользователя\n2. Логин с правильными данными\n3. Получение профиля с токеном\n4. Обновление HH.ru токена\n5. Смена пароля\n6. Негативные тесты (неверные данные)\n\nПеременные:\n- baseUrl: http://localhost:8000\n- userEmail: динамически генерируется\n- accessToken: сохраняется после логина\n- userId: ID пользователя",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. User Registration & Login Flow",
			"item": [
				{
					"name": "1.1 Register New User - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Генерация уникального email для тестов",
									"const timestamp = Date.now();",
									"const testEmail = `test_${timestamp}@timly-test.ru`;",
									"pm.environment.set('userEmail', testEmail);",
									"pm.environment.set('userPassword', 'TestPass123');",
									"pm.environment.set('companyName', 'ООО Тестовая Компания');",
									"",
									"console.log('Generated test email:', testEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201 Created', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has correct structure', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('role');",
									"    pm.expect(response).to.have.property('company_name');",
									"    pm.expect(response).to.have.property('has_hh_token');",
									"    pm.expect(response).to.have.property('token_verified');",
									"    pm.expect(response).to.have.property('created_at');",
									"});",
									"",
									"pm.test('User data matches input', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response.email).to.equal(pm.environment.get('userEmail'));",
									"    pm.expect(response.company_name).to.equal(pm.environment.get('companyName'));",
									"    pm.expect(response.role).to.equal('user');",
									"    pm.expect(response.has_hh_token).to.be.false;",
									"    pm.expect(response.token_verified).to.be.false;",
									"});",
									"",
									"pm.test('Password is not returned in response', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.not.have.property('password');",
									"    pm.expect(response).to.not.have.property('password_hash');",
									"});",
									"",
									"pm.test('UUID format is valid', function () {",
									"    const response = pm.response.json();",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    ",
									"    pm.expect(response.id).to.match(uuidRegex);",
									"    pm.environment.set('userId', response.id);",
									"});",
									"",
									"pm.test('Response time is acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\",\n    \"company_name\": \"{{companyName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Register Duplicate Email - Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 Bad Request', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message about duplicate email', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.detail).to.include('уже существует');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"DifferentPass123\",\n    \"company_name\": \"Another Company\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Login with Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response contains access token', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('access_token');",
									"    pm.expect(response).to.have.property('token_type');",
									"    pm.expect(response).to.have.property('expires_in');",
									"});",
									"",
									"pm.test('Token type is bearer', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.token_type).to.equal('bearer');",
									"});",
									"",
									"pm.test('Access token is JWT format', function () {",
									"    const response = pm.response.json();",
									"    const tokenParts = response.access_token.split('.');",
									"    ",
									"    pm.expect(tokenParts).to.have.lengthOf(3);",
									"});",
									"",
									"pm.test('Expires in is positive number', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.expires_in).to.be.a('number');",
									"    pm.expect(response.expires_in).to.be.above(0);",
									"});",
									"",
									"// Сохраняем токен для следующих запросов",
									"const response = pm.response.json();",
									"pm.environment.set('accessToken', response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Login with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401 Unauthorized', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Contains WWW-Authenticate header', function () {",
									"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.equal('Bearer');",
									"});",
									"",
									"pm.test('Error message about invalid credentials', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.detail).to.include('Неверный email или пароль');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"WrongPassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Protected Endpoints",
			"item": [
				{
					"name": "2.1 Get User Profile - Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile matches registered user', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response.email).to.equal(pm.environment.get('userEmail'));",
									"    pm.expect(response.company_name).to.equal(pm.environment.get('companyName'));",
									"    pm.expect(response.id).to.equal(pm.environment.get('userId'));",
									"});",
									"",
									"pm.test('Profile contains all required fields', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.have.property('id');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.have.property('role');",
									"    pm.expect(response).to.have.property('company_name');",
									"    pm.expect(response).to.have.property('has_hh_token');",
									"    pm.expect(response).to.have.property('token_verified');",
									"});",
									"",
									"pm.test('Sensitive data is not exposed', function () {",
									"    const response = pm.response.json();",
									"    ",
									"    pm.expect(response).to.not.have.property('password');",
									"    pm.expect(response).to.not.have.property('password_hash');",
									"    pm.expect(response).to.not.have.property('encrypted_hh_token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Get User Profile - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403 Forbidden or 401 Unauthorized', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Get User Profile - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401 Unauthorized', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Contains WWW-Authenticate header', function () {",
									"    pm.expect(pm.response.headers.get('WWW-Authenticate')).to.equal('Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid.token.here"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. HH.ru Token Management",
			"item": [
				{
					"name": "3.1 Update HH Token - Mock Valid Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Для тестирования используем мок токен",
									"pm.environment.set('hhToken', 'mock_valid_hh_token_for_testing_' + Date.now());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Этот тест может fail если HH API недоступен",
									"// В продакшене должен быть мок для HH API",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Status code is 200 OK', function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test('Success response structure', function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response).to.have.property('status');",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response.status).to.equal('success');",
									"    });",
									"} else if (pm.response.code === 400) {",
									"    pm.test('Invalid token handled correctly', function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.detail).to.include('Недействительный');",
									"    });",
									"} else {",
									"    pm.test('Response code is handled', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hh_token\": \"{{hhToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/hh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"hh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Update HH Token - Empty Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422 Unprocessable Entity', function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hh_token\": \"\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/hh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"hh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 Delete HH Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Success response', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.equal('success');",
									"    pm.expect(response.message).to.include('удален');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/hh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"hh-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Password Management",
			"item": [
				{
					"name": "4.1 Change Password - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('newPassword', 'NewTestPass456');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Success response', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.equal('success');",
									"    pm.expect(response.message).to.include('изменен');",
									"});",
									"",
									"// Обновляем пароль в переменных окружения",
									"pm.environment.set('userPassword', pm.environment.get('newPassword'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"{{userPassword}}\",\n    \"new_password\": \"{{newPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Change Password - Wrong Current Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401 Unauthorized', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Error message about wrong password', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.detail).to.include('Неверный текущий пароль');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"current_password\": \"WrongCurrentPassword\",\n    \"new_password\": \"AnotherNewPass789\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.3 Login with New Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Can login with new password', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Security Tests",
			"item": [
				{
					"name": "5.1 SQL Injection in Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is not 200 (SQL injection blocked)', function () {",
									"    pm.expect(pm.response.code).to.not.equal(200);",
									"});",
									"",
									"pm.test('Response is 401 Unauthorized or 422 Validation Error', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 422]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin'; DROP TABLE users; --\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 Password Validation - Weak Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const weakTestEmail = `weak_${Date.now()}@test.ru`;",
									"pm.environment.set('weakTestEmail', weakTestEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422 Unprocessable Entity', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Password validation error is present', function () {",
									"    const response = pm.response.json();",
									"    const details = JSON.stringify(response.detail);",
									"    ",
									"    // Проверяем что есть ошибка валидации пароля",
									"    const hasPasswordError = details.includes('пароль') || ",
									"                             details.includes('password') ||",
									"                             details.includes('заглавную') ||",
									"                             details.includes('строчную') ||",
									"                             details.includes('цифру');",
									"    ",
									"    pm.expect(hasPasswordError).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{weakTestEmail}}\",\n    \"password\": \"weak\",\n    \"company_name\": \"Test Co\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.3 Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Logout success message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.status).to.equal('success');",
									"    pm.expect(response.message).to.include('выполнен');",
									"});",
									"",
									"// Очищаем токен из переменных",
									"pm.environment.unset('accessToken');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Глобальная настройка переменных окружения",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:8000');",
					"}",
					"",
					"// Логирование для отладки",
					"console.log('Running request:', pm.info.requestName);",
					"console.log('Base URL:', pm.environment.get('baseUrl'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Глобальные тесты для всех запросов",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has proper Content-Type', function () {",
					"    if (pm.response.code !== 422) { // 422 может иметь другой Content-Type",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});",
					"",
					"// Логирование результата",
					"console.log('Response status:', pm.response.status);",
					"console.log('Response time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}